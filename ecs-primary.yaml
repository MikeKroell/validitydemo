# aws cli: aws cloudformation create-stack --stack-name demo-ecs-primary --template-body file://ecs-primary.yaml --capabilities CAPABILITY_NAMED_IAM --parameters file://ecs-primary-parameters.json
#
AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'infrastructure-vpc'
      Parameters:
      - VPC
      - ThreeAZsPublicSubnets
      - ThreeAZsPrivateSubnets
Parameters:
  ClusterName:
    Type: String
    Description: Name of the ECS cluster to create
  VpcStackName:
    Type: String
    Default: infrastructure-vpc
  CertificateArn:
    Description: The ARN of the HTTPS certificate
    Type: String
  Environment:
    Type: String
    Description: Full Words - Terms defined by business
Resources:
   EcsCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ClusterName
   EcsAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '90'
      Subnets: 
      - {'Fn::ImportValue': !Sub '${VpcStackName}-PublicSubnet1'}
      - {'Fn::ImportValue': !Sub '${VpcStackName}-PublicSubnet2'}
      - {'Fn::ImportValue': !Sub '${VpcStackName}-PublicSubnet3'}
      SecurityGroups: 
      - !Ref EcsAlbSecurityGroup
   EcsAlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${ClusterName}-ALB-EXT-SG'
      VpcId: {'Fn::ImportValue': !Sub '${VpcStackName}-VPC'}
   EcsAlbSecurityGroupInHttp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsAlbSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
   EcsAlbSecurityGroupInHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsAlbSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
   HttpAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref EcsAlb
      Port: 80
      Protocol: HTTP
   HttpsAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
      LoadBalancerArn: !Ref EcsAlb
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2015-05
      Certificates:
        - CertificateArn: !Ref CertificateArn
   DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ClusterName}-EXT-Default"
      Port: 1
      TargetType: ip
      Protocol: HTTP
      VpcId: {'Fn::ImportValue': !Sub '${VpcStackName}-VPC'}
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "5"
Outputs:
  EcsClusterName:
    Description: The name of the ECS cluster
    Value: !Ref EcsCluster
    Export:
      Name: !Sub "${AWS::StackName}-EcsClusterName"
  HttpAlbListenerArn:
    Description: The ARN of the HTTPS ALB listener
    Value: !Ref HttpAlbListener
    Export:
      Name: !Sub "${AWS::StackName}-HttpAlbListenerArn"
  DefaultTargetGroupArn:
    Description: The ARN of the Default Target Group
    Value: !Ref DefaultTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-DefaultTargetGroupArn"
  EcsAlbSecurityGroup:
    Description: The security group of the ALB
    Value: !Ref EcsAlbSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EcsAlbSecurityGroup"
